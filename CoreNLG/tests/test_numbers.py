# -*- coding: utf-8 -*-
"""
created on 25/07/2019 15:42
@author: fgiely
"""
import pytest

from CoreNLGMod.NlgTools import NlgTools
from CoreNLGMod.tests.fixtures import post_treatment_with_numbers_fr


class TestNumbers:

    nlg = NlgTools()
    nlg_num = nlg.nlg_num

    @pytest.mark.parametrize(
        "input, expected",
        [
            (1, "1"),
            (1.0, "1,0"),
            (1.00, "1,0"),
            (1.002, "1,002"),
            (-15, "-15"),
            (178, "178"),
            (245.489, "245,489"),
            (245.48944897, "245,48944897"),
            (-245.48944897, "-245,48944897"),
            (245.400000000, "245,4"),
            (12354, "12 354"),
            (12354789, "12 354 789"),
            (-12354789, "-12 354 789"),
            (21657845.400000000, "21 657 845,4"),
            (21657845.41564865, "21 657 845,41564865"),
        ],
    )
    def test_number(self, input, expected):
        assert post_treatment_with_numbers_fr(input) == expected

    @pytest.mark.parametrize(
        "input, expected",
        [
            (1, "1€"),
            (1.0, "1,0€"),
            (1.00, "1,0€"),
            (1.002, "1,002€"),
            (-15, "-15€"),
            (178, "178€"),
            (245.489, "245,489€"),
            (245.48944897, "245,48944897€"),
            (-245.48944897, "-245,48944897€"),
            (245.400000000, "245,4€"),
            (12354, "12 354€"),
            (12354789, "12 354 789€"),
            (-12354789, "-12 354 789€"),
            (21657845.400000000, "21 657 845,4€"),
            (21657845.41564865, "21 657 845,41564865€"),
        ],
    )
    def test_number_short(self, input, expected):
        assert post_treatment_with_numbers_fr(input, short="€") == expected

    @pytest.mark.parametrize(
        "input, expected",
        [
            (1, "1"),
            (1.0, "1_0"),
            (1.00, "1_0"),
            (1.002, "1_002"),
            (-15, "-15"),
            (178, "178"),
            (245.489, "245_489"),
            (245.48944897, "245_48944897"),
            (-245.48944897, "-245_48944897"),
            (245.400000000, "245_4"),
            (12354, "12 354"),
            (12354789, "12 354 789"),
            (-12354789, "-12 354 789"),
            (21657845.400000000, "21 657 845_4"),
            (21657845.41564865, "21 657 845_41564865"),
        ],
    )
    def test_number_sep(self, input, expected):
        assert post_treatment_with_numbers_fr(input, sep="_") == expected

    @pytest.mark.parametrize(
        "input, expected",
        [
            (1, "1"),
            (1.0, "1,0"),
            (1.00, "1,0"),
            (1.002, "1,002"),
            (-15, "-15"),
            (178, "178"),
            (245.489, "245,489"),
            (245.48944897, "245,48944897"),
            (-245.48944897, "-245,48944897"),
            (245.400000000, "245,4"),
            (12354, "12'354"),
            (12354789, "12'354'789"),
            (-12354789, "-12'354'789"),
            (21657845.400000000, "21'657'845,4"),
            (21657845.41564865, "21'657'845,41564865"),
        ],
    )
    def test_number_mile_sep(self, input, expected):
        assert post_treatment_with_numbers_fr(input, mile_sep="'") == expected

    @pytest.mark.parametrize(
        "input, expected",
        [
            (1, "1"),
            (1.0, "1"),
            (1.00, "1"),
            (1.002, "1"),
            (-15, "-15"),
            (178, "178"),
            (245.489, "245,49"),
            (245.48944897, "245,49"),
            (-245.48944897, "-245,49"),
            (245.400000000, "245,4"),
            (12354, "12 354"),
            (12354789, "12 354 789"),
            (-12354789, "-12 354 789"),
            (21657845.400000000, "21 657 845,4"),
            (21657845.41564865, "21 657 845,42"),
        ],
    )
    def test_number_dec(self, input, expected):
        assert post_treatment_with_numbers_fr(input, dec=2) == expected

    @pytest.mark.parametrize(
        "input, expected",
        [
            (1, "+1"),
            (1.0, "+1,0"),
            (1.00, "+1,0"),
            (1.002, "+1,002"),
            (-15, "-15"),
            (178, "+178"),
            (245.489, "+245,489"),
            (245.48944897, "+245,48944897"),
            (-245.48944897, "-245,48944897"),
            (245.400000000, "+245,4"),
            (12354, "+12 354"),
            (12354789, "+12 354 789"),
            (-12354789, "-12 354 789"),
            (21657845.400000000, "+21 657 845,4"),
            (21657845.41564865, "+21 657 845,41564865"),
        ],
    )
    def test_number_force_sign(self, input, expected):
        assert post_treatment_with_numbers_fr(input, force_sign=True) == expected

    @pytest.mark.parametrize(
        "input, expected",
        [
            (1, "1,00"),
            (1.0, "1,00"),
            (1.00, "1,00"),
            (1.100, "1,10"),
            (1.002, "1,00"),
            (-15, "-15,00"),
            (178, "178,00"),
            (245.489, "245,49"),
            (245.48944897, "245,49"),
            (-245.48944897, "-245,49"),
            (245.400000000, "245,40"),
            (12354, "12 354,00"),
            (12354789, "12 354 789,00"),
            (-12354789, "-12 354 789,00"),
            (21657845.400000000, "21 657 845,40"),
            (21657845.41564865, "21 657 845,42"),
        ],
    )
    def test_number_without_remove_trailing_zeros(self, input, expected):
        assert post_treatment_with_numbers_fr(input, dec=2, remove_trailing_zeros=False) == expected

    @pytest.mark.parametrize(
        "input, expected",
        [
            (1, "0k€"),
            (1.0, "0k€"),
            (1.00, "0k€"),
            (1.002, "0k€"),
            (-15, "-0,01k€"),
            (178, "0,18k€"),
            (245.489, "0,25k€"),
            (245.48944897, "0,25k€"),
            (-245.48944897, "-0,25k€"),
            (245.400000000, "0,25k€"),
            (12354, "12,35k€"),
            (10000, "10k€"),
            (12354789, "12'354,79k€"),
            (-12354789, "-12'354,79k€"),
            (21657845.400000000, "21'657,85k€"),
            (21657845.41564865, "21'657,85k€"),
        ],
    )
    def test_number_multi_params(self, input, expected):
        assert post_treatment_with_numbers_fr(input/1000, short="k€", mile_sep="'", sep=",", dec=2) == expected